buildscript {
    repositories {
        maven {
            url = 'http://files.minecraftforge.net/maven'
        }
		jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'signing'

version = "1.16.1-2.1.15"

def buildID = Long.toUnsignedString(new Random().nextLong(), 16).toUpperCase()

def fileVersion = "2.1.15"
def signSHA1 = "1945fa1cbb8ec2ffad2ccec7a0ca72ad52b20ef8"
group= "net.jomcraft.defaultsettings"
ext.isReleaseVersion = project.hasProperty("isSonaType") ? isSonaType : false

archivesBaseName = "DefaultSettings"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20200514-1.16'

	runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            source sourceSets.main
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            source sourceSets.main
        }
    }
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.1-32.0.24'
}

def forge_version = "32.0.14"

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version': fileVersion, 'forge_version': forge_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

jar {

	println "BuildID: $buildID"

	exclude('net/**') 

	exclude('de/pt400c/defaultsettings/font/Alpha1_14Handler**')
	
	exclude('com/**') 
    
    manifest {
    	attributes 'FMLAT': 'defaultsettings_at.cfg'
        attributes([
            "Specification-Title": "DefaultSettings",
            "Specification-Vendor": "Jomcraft Network",
            "Specification-Version": fileVersion,
            "Implementation-Title": "DefaultSettings",
            "Implementation-Version": fileVersion,
            "Implementation-Vendor" : "Jomcraft Network",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Build-ID": buildID
        ])
    }

}

task signJar {

    doLast {
        configurations.archives.allArtifacts.files.each {
           if(it.name.endsWith(".jar")){
            	ant.signjar(
                	jar: it,
					storetype:"jks",
					alias: project.property("signing.alias"),
                	storepass:project.property("signing.keyStorePassword"),
                	keystore: project.property("signing.keystorePath"),
                	keypass: project.property("signing.keyStorePassword"),
                	preservelastmodified:"true"
            	)
            	signing.sign(it)
				project.logger.lifecycle("JAR Signed: " + it.name)
			}
       }
    }
}

build.dependsOn signJar

uploadArchives.dependsOn signJar

signing {
	if(isReleaseVersion)
    	sign configurations.archives
}

subprojects {
    tasks.withType(Javadoc).all { enabled = isReleaseVersion }
}

task sourcesJar(type: Jar) {

	exclude('net/**') 
	
	exclude('com/**') 
	
	from sourceSets.main.allSource
	classifier = 'sources'
}

task deobfJar(type: Jar) {
	
	exclude('net/**')
	
	exclude('de/pt400c/defaultsettings/font/Alpha1_14Handler**')
	
	exclude('com/**') 
	
	from sourceSets.main.output
	classifier = 'deobf'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
	archives sourcesJar
	archives deobfJar
	if(isReleaseVersion)
		archives javadocJar
}

task zipVerification {
    doLast {
        ant.zip(destfile: "$buildDir/libs/verification.zip") {
            fileset(dir: "$buildDir/libs/") {
                include(name: '*.asc')
            }
            fileset(dir: "") {
                include(name: 'pubkey.gpg')
            }
        }
        if(!isReleaseVersion){
        	delete fileTree("$buildDir/libs/") {
				include '**/*.asc'
			}
		}
        project.logger.lifecycle("Created verification ZIP")
    }
}

build.dependsOn zipVerification

curseforge {

  apiKey = project.property("cursegradle.api_token")
  project {
    id = '318012'
    changelog = file("changelog.html")
    changelogType = 'html'
    releaseType = 'release'
    addGameVersion '1.16.1'
    mainArtifact(jar) {
    	displayName = "$archivesBaseName-$version"
    }
    
    addArtifact (sourcesJar) {
    	releaseType = 'release'
    	displayName = "$archivesBaseName-$version-sources"
    }
    
    addArtifact (deobfJar) {
    	releaseType = 'release'
    	displayName = "$archivesBaseName-$version-deobf"
    }
    
    addArtifact ("$buildDir/libs/verification.zip") {
    	releaseType = 'release'
    	displayName = 'GPGVerification'
    }
    
  }

}