buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
		maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply plugin: 'forge'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'maven'

version = "1.7.10-2.2.4"

def buildID = Long.toUnsignedString(new Random().nextLong(), 16).toUpperCase()

sourceCompatibility = targetCompatibility = '1.8'

def fileVersion = "2.2.4"
def signSHA1 = "1945fa1cbb8ec2ffad2ccec7a0ca72ad52b20ef8"
group= "net.jomcraft.defaultsettings"
ext.isReleaseVersion = project.hasProperty("isSonaType") ? isSonaType : false

archivesBaseName = "DefaultSettings"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
    
    replaceIn 	"de/pt400c/defaultsettings/DefaultSettings.java"
	replace 	"@FINGERPRINT@", signSHA1
    replace   	"DS-Version", fileVersion
}

jar {
	println "BuildID: $buildID"

    manifest {
        attributes("FMLAT": "defaultsettings_at.cfg")
        attributes 'FMLCorePlugin': 'de.pt400c.defaultsettings.core.DefaultSettingsPlugin'
        attributes 'FMLCorePluginContainsFMLMod': 'false'
        attributes([
            "Build-ID": buildID,
            "Build-Date": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources
{

    inputs.property "version", fileVersion
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':fileVersion, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task signJar {
    doLast {
        configurations.archives.allArtifacts.files.each {
            if(it.name.endsWith(".jar")){
            	ant.signjar(
                	jar: it,
					storetype:"jks",
					alias: project.property("signing.alias"),
                	storepass:project.property("signing.keyStorePassword"),
                	keystore: project.property("signing.keystorePath"),
                	keypass: project.property("signing.keyStorePassword"),
                	preservelastmodified:"true"
            	)
            	signing.sign(it)
				project.logger.lifecycle("JAR Signed: " + it.name)
			}
       }
    }
}

build.dependsOn signJar

uploadArchives.dependsOn signJar

signing {
	if(isReleaseVersion)
    	sign configurations.archives
}

subprojects {
    tasks.withType(Javadoc).all { enabled = isReleaseVersion }
}

task sourcesJar(type: Jar, dependsOn: classes) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

task deobfJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'deobf'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
	archives sourcesJar
	archives deobfJar
	if(isReleaseVersion)
		archives javadocJar
}

task zipVerification {
    doLast {
        ant.zip(destfile: "$buildDir/libs/verification.zip") {
            fileset(dir: "$buildDir/libs/") {
                include(name: '*.asc')
            }
            fileset(dir: "") {
                include(name: 'pubkey.gpg')
            }
        }
        if(!isReleaseVersion){
        	delete fileTree("$buildDir/libs/") {
				include '**/*.asc'
			}
		}
        project.logger.lifecycle("Created verification ZIP")
    }
}

build.dependsOn zipVerification

curseforge {

  apiKey = project.property("cursegradle.api_token")
  project {
    id = '318012'
    changelog = file("changelog.html")
    changelogType = 'html'
    relations {
    	requiredDependency 'neptunefx'
	}
    releaseType = 'release'
    mainArtifact(jar) {
    	displayName = "$archivesBaseName-$version"
    	addGameVersion '1.7.10'
    }
    
    addArtifact (sourcesJar) {
    	displayName = "$archivesBaseName-$version-sources"
    }
    
    addArtifact (deobfJar) {
    	displayName = "$archivesBaseName-$version-deobf"
    }
    
    addArtifact ("$buildDir/libs/verification.zip") {
    	releaseType = 'release'
    	displayName = 'GPGVerification'
    }
    
  }
  
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment mvnd ->
               signing.signPom(mvnd)
	  }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'DefaultSettings'
        packaging 'jar'
		artifactId 'DefaultSettings-1.7.10'
		version fileVersion
        description 'https://github.com/DefaultSettings-GH/'
        url 'https://github.com/DefaultSettings-GH/DefaultSettings-GH'

        scm {
        	connection 'https://github.com/DefaultSettings-GH/DefaultSettings-GH.git'
        	developerConnection 'https://github.com/DefaultSettings-GH/DefaultSettings-GH.git'
        	url 'https://github.com/DefaultSettings-GH/DefaultSettings-GH'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'PT400C'
            name 'Rolf Marker'
            email 'pt400c@gmail.com'
          }
        }
      }
    }
  }
}