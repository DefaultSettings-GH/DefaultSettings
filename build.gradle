buildscript {
    repositories {
        maven {
            url = 'http://files.minecraftforge.net/maven'
        }
		jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'signing'

version = "1.13.2-2.2.1"
def buildID = Long.toUnsignedString(new Random().nextLong(), 16).toUpperCase()

def fileVersion = "2.2.1"
def signSHA1 = "1945fa1cbb8ec2ffad2ccec7a0ca72ad52b20ef8"
group = "net.jomcraft.defaultsettings"

archivesBaseName = "DefaultSettings"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20180921-1.13'

	runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            source sourceSets.main
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            source sourceSets.main
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.13.2-25.0.219'
}

def minecraft_version = "1.13.2"

def forge_version = "25.0.219"

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version': fileVersion, 'mcversion': minecraft_version, 'forge_version': forge_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

jar {
	println "BuildID: $buildID"
    manifest {
        attributes([
            "Specification-Title": "DefaultSettings",
            "Specification-Vendor": "Jomcraft Network",
            "Specification-Version": fileVersion,
            "Implementation-Title": "DefaultSettings",
            "Implementation-Version": fileVersion,
            "Implementation-Vendor" : "Jomcraft Network",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Build-ID": buildID
        ])
    }
}

task signJar {
	if(project.hasProperty("signing.alias") && project.property("signing.alias") != null && !project.property("signing.alias").equals("")){
		doLast {
			configurations.archives.allArtifacts.files.each {
				if(it.name.endsWith(".jar")){
					ant.signjar(jar: it,
					storetype:"jks",
					alias: project.property("signing.alias"),
					storepass:project.property("signing.keyStorePassword"),
					keystore: project.property("signing.keystorePath"),
					keypass: project.property("signing.keyStorePassword"),
					preservelastmodified:"true")
					signing.sign(it)
					project.logger.lifecycle("JAR Signed: " + it.name)
				}
			}
		}
	} else {
		project.logger.lifecycle("Signing skipped, not authorized")	
	}
}

build.dependsOn signJar

task sourcesJar(type: Jar, dependsOn: classes) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

task deobfJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'deobf'
}

artifacts {
	archives jar
	archives sourcesJar
	archives deobfJar
}

task zipVerification {
	doLast {
		ant.zip(destfile: "$buildDir/libs/verification.zip") {
            fileset(dir: "$buildDir/libs/") {
                include(name: '*.asc')
            }
            fileset(dir: "") {
                include(name: 'pubkey.gpg')
            }
        }
		delete fileTree("$buildDir/libs/") {
			include '**/*.asc'
		}
        project.logger.lifecycle("Created verification ZIP")
    }
}

build.dependsOn zipVerification

curseforge {
	if(project.hasProperty("cursegradle.api_token") && project.property("cursegradle.api_token") != null && !project.property("cursegradle.api_token").equals("")) {
		apiKey = project.property("cursegradle.api_token")
		project {
			id = '318012'
			changelog = file("changelog.html")
			changelogType = 'html'
			relations {
      			requiredDependency 'neptunefx'
    		}
			releaseType = 'release'
			addGameVersion '1.13.2'
			mainArtifact(jar) {
				displayName = "$archivesBaseName-$version"
			}
    
			addArtifact (sourcesJar) {
				releaseType = 'release'
				displayName = "$archivesBaseName-$version-sources"
			}
    
			addArtifact (deobfJar) {
				releaseType = 'release'
				displayName = "$archivesBaseName-$version-deobf"
			}
    
			addArtifact ("$buildDir/libs/verification.zip") {
				releaseType = 'release'
				displayName = 'GPGVerification'
			}
		}
	}
}