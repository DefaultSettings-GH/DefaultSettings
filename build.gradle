buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.2.0'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'signing'

version = "1.11.2-1.2.1"

def fileVersion = "1.2.1"
def signSHA1 = "1945fa1cbb8ec2ffad2ccec7a0ca72ad52b20ef8"
group= "de.pt400c.defaultsettings"
archivesBaseName = "DefaultSettings"

sourceCompatibility = targetCompatibility = '1.8' 
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.11.2-13.20.1.2588"
	mappings = "snapshot_20161220"
    runDir = "eclipse"
    
    replaceIn 	"de/pt400c/defaultsettings/DefaultSettings.java"
	replace 	"@FINGERPRINT@", signSHA1
    replace   	"@VERSION@", fileVersion
}

jar {
    manifest {
        attributes("FMLAT": "defaultsettings_at.cfg")
        attributes 'FMLCorePlugin': 'de.pt400c.defaultsettings.core.DefaultSettingsPlugin'
        attributes 'FMLCorePluginContainsFMLMod': 'false'
    }
}

processResources
{

    inputs.property "version", fileVersion
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':fileVersion, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task signJar {
    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
				storetype:"jks",
				alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified:"true"
            )
            signing.sign(it)
			project.logger.lifecycle("JAR Signed: " + it.name)
        }
    }
}

build.dependsOn signJar

task sourcesJar(type: Jar, dependsOn: classes) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

task deobfJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'deobf'
}

artifacts {
	archives sourcesJar
	archives deobfJar
}

task zipVerification {
    doLast {
        ant.zip(destfile: "$buildDir/libs/verification.zip") {
            fileset(dir: "$buildDir/libs/") {
                include(name: '*.asc')
            }
            fileset(dir: "") {
                include(name: 'pubkey.gpg')
            }
        }
        project.logger.lifecycle("Created verification ZIP")
    }
}

build.dependsOn zipVerification

curseforge {

  apiKey = project.property("cursegradle.api_token")
  project {
    id = '318012'
    releaseType = 'beta'
    mainArtifact(jar) {
    	displayName = "$archivesBaseName-$version"
    }
    
    addArtifact (sourcesJar) {
    	displayName = "$archivesBaseName-$version-sources"
    }
    
    addArtifact (deobfJar) {
    	displayName = "$archivesBaseName-$version-deobf"
    }
    
    addArtifact ("$buildDir/libs/verification.zip") {
    	releaseType = 'release'
    	displayName = 'GPGVerification'
    }
    
  }
  
}